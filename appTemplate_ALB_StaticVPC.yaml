AWSTemplateFormatVersion: 2010-09-09
Description: Template to launch web server on EC2 instance with ALB

#Parameters that need to provided during stack creation 
Parameters:
    keyName:
        Type: String
        Description: Key to access the EC2 instance
        
    EC2InstanceTag:
        Description: Value for ec2 instance name tag
        Type: String
        Default: Test-app
        
Resources:
# Creating Security Groups
    appEc2InstanceSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: App EC2 security group
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  SourceSecurityGroupId:
                    Fn::GetAtt:
                        - appALBSecurityGroup
                        - GroupId
    appALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: app ALB Security Group
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

# Creating EC2 instance with web server running
    appInstance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: ami-0f1fb91a596abf28d 
            InstanceType: t2.micro
            IamInstanceProfile: !Ref EC2InstanceProfile
            SecurityGroups:
                - !Ref appEc2InstanceSG
            KeyName: !Ref keyName
            Tags:
                - Key: Name
                  Value: !Ref EC2InstanceTag
            UserData: 
                Fn::Base64: !Sub |
                    #!/bin/bash
                    yum update -y
                    yum install -y httpd
                    systemctl start httpd
                    systemctl enable httpd
                    #echo "<h1>Hello from Test-app</h1>" > /var/www/html/index.html
                    yum install ruby -y
                    yum install wget -y
                    cd /home/ec2-user/
                    wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install
                    chmod +x ./install
                    ./install auto
                    ./install auto -v releases/codedeploy-agent-###.rpm
                    service codedeploy-agent start

# Creating ALB target group 
    appEC2TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 15
            HealthyThresholdCount: 5
            Matcher:
                HttpCode: '200'
            Name: appEC2TargetGroup
            Port: 80
            Protocol: HTTP
            Targets:
                - Id: !Ref appInstance
                  Port: 80
            UnhealthyThresholdCount: 3
            VpcId: vpc-07b9a395a01a5a1dc
            
# creating Application load balancer
    appALB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Scheme: internet-facing
            Subnets:
                - subnet-063bbe0318c92d006
                - subnet-0161eacd3cce0498f
                - subnet-0fb2a8ec6bfb7792f
            SecurityGroups:
                - !GetAtt appALBSecurityGroup.GroupId
                
# Creating ALB listener
    appALBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
               - Type: forward
                 TargetGroupArn: !Ref appEC2TargetGroup
            LoadBalancerArn: !Ref appALB
            Port: 80
            Protocol: HTTP
    
# Creating IAM role    
    EC2Role:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        Service: ec2.amazonaws.com
                      Action: sts:AssumeRole
            Path: /
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

# Creating EC2 profile                 
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            InstanceProfileName: demo-ec2-instance-profile
            Path: /
            Roles: 
                - !Ref EC2Role